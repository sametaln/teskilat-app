{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"autoFocus\", \"children\", \"className\", \"component\", \"components\", \"componentsProps\", \"defaultValue\", \"defaultListboxOpen\", \"disabled\", \"listboxOpen\", \"onChange\", \"onListboxOpenChange\", \"renderValue\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_useForkRef as useForkRef, unstable_useControlled as useControlled } from '@mui/utils';\nimport { flattenOptionGroups, getOptionsFromChildren } from './utils';\nimport useSelect from './useSelect';\nimport { appendOwnerState } from '../utils';\nimport PopperUnstyled from '../PopperUnstyled';\nimport { SelectUnstyledContext } from './SelectUnstyledContext';\nimport composeClasses from '../composeClasses';\nimport { getSelectUnstyledUtilityClass } from './selectUnstyledClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction defaultRenderSingleValue(selectedOption) {\n  var _selectedOption$label;\n\n  return (_selectedOption$label = selectedOption == null ? void 0 : selectedOption.label) != null ? _selectedOption$label : '';\n}\n\nfunction useUtilityClasses(ownerState) {\n  const {\n    active,\n    disabled,\n    open,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],\n    listbox: ['listbox', disabled && 'disabled'],\n    popper: ['popper']\n  };\n  return composeClasses(slots, getSelectUnstyledUtilityClass, {});\n}\n/**\n * The foundation for building custom-styled select components.\n */\n\n\nconst SelectUnstyled = /*#__PURE__*/React.forwardRef(function SelectUnstyled(props, ref) {\n  var _ref, _components$Listbox, _components$Popper, _componentsProps$list, _componentsProps$list2, _componentsProps$root, _componentsProps$list3, _componentsProps$popp;\n\n  const {\n    autoFocus,\n    children,\n    className,\n    component,\n    components = {},\n    componentsProps = {},\n    defaultValue,\n    defaultListboxOpen = false,\n    disabled: disabledProp,\n    listboxOpen: listboxOpenProp,\n    onChange,\n    onListboxOpenChange,\n    renderValue: renderValueProp,\n    value: valueProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderSingleValue;\n  const [groupedOptions, setGroupedOptions] = React.useState([]);\n  const options = React.useMemo(() => flattenOptionGroups(groupedOptions), [groupedOptions]);\n  const [listboxOpen, setListboxOpen] = useControlled({\n    controlled: listboxOpenProp,\n    default: defaultListboxOpen,\n    name: 'SelectUnstyled',\n    state: 'listboxOpen'\n  });\n  React.useEffect(() => {\n    setGroupedOptions(getOptionsFromChildren(children));\n  }, [children]);\n  const [buttonDefined, setButtonDefined] = React.useState(false);\n  const buttonRef = React.useRef(null);\n  const Button = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';\n  const ListboxRoot = (_components$Listbox = components.Listbox) != null ? _components$Listbox : 'ul';\n  const Popper = (_components$Popper = components.Popper) != null ? _components$Popper : PopperUnstyled;\n\n  const handleButtonRefChange = element => {\n    buttonRef.current = element;\n\n    if (element != null) {\n      setButtonDefined(true);\n    }\n  };\n\n  const handleButtonRef = useForkRef(ref, handleButtonRefChange);\n  React.useEffect(() => {\n    if (autoFocus) {\n      buttonRef.current.focus();\n    }\n  }, [autoFocus]);\n\n  const handleOpenChange = isOpen => {\n    setListboxOpen(isOpen);\n    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);\n  };\n\n  const {\n    buttonActive,\n    buttonFocusVisible,\n    disabled,\n    getButtonProps,\n    getListboxProps,\n    getOptionProps,\n    getOptionState,\n    value\n  } = useSelect({\n    buttonComponent: Button,\n    buttonRef: handleButtonRef,\n    defaultValue,\n    disabled: disabledProp,\n    listboxId: (_componentsProps$list = componentsProps.listbox) == null ? void 0 : _componentsProps$list.id,\n    listboxRef: (_componentsProps$list2 = componentsProps.listbox) == null ? void 0 : _componentsProps$list2.ref,\n    multiple: false,\n    onChange,\n    onOpenChange: handleOpenChange,\n    open: listboxOpen,\n    options,\n    value: valueProp\n  });\n\n  const ownerState = _extends({}, props, {\n    active: buttonActive,\n    defaultListboxOpen,\n    disabled,\n    focusVisible: buttonFocusVisible,\n    open: listboxOpen,\n    renderValue,\n    value\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const selectedOptions = React.useMemo(() => {\n    return options.find(o => value === o.value);\n  }, [options, value]);\n  const buttonProps = appendOwnerState(Button, _extends({}, other, componentsProps.root, getButtonProps(), {\n    className: clsx(className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, classes.root)\n  }), ownerState);\n  const listboxProps = appendOwnerState(ListboxRoot, _extends({}, componentsProps.listbox, getListboxProps(), {\n    className: clsx((_componentsProps$list3 = componentsProps.listbox) == null ? void 0 : _componentsProps$list3.className, classes.listbox)\n  }), ownerState);\n  const popperProps = appendOwnerState(Popper, _extends({\n    open: listboxOpen,\n    anchorEl: buttonRef.current,\n    placement: 'bottom-start',\n    disablePortal: true,\n    role: undefined\n  }, componentsProps.popper, {\n    className: clsx((_componentsProps$popp = componentsProps.popper) == null ? void 0 : _componentsProps$popp.className, classes.popper)\n  }), ownerState);\n  const context = {\n    getOptionProps,\n    getOptionState\n  };\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Button, _extends({}, buttonProps, {\n      children: renderValue(selectedOptions)\n    })), buttonDefined && /*#__PURE__*/_jsx(Popper, _extends({}, popperProps, {\n      children: /*#__PURE__*/_jsx(ListboxRoot, _extends({}, listboxProps, {\n        children: /*#__PURE__*/_jsx(SelectUnstyledContext.Provider, {\n          value: context,\n          children: children\n        })\n      }))\n    }))]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SelectUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the select element is focused during the first mount\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the Select.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Listbox: PropTypes.elementType,\n    Popper: PropTypes.elementType,\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the Input.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    listbox: PropTypes.object,\n    popper: PropTypes.object,\n    root: PropTypes.object\n  }),\n\n  /**\n   * If `true`, the select will be initially open.\n   * @default false\n   */\n  defaultListboxOpen: PropTypes.bool,\n\n  /**\n   * The default selected value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .any,\n\n  /**\n   * If `true`, the select is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Controls the open state of the select's listbox.\n   * @default undefined\n   */\n  listboxOpen: PropTypes.bool,\n\n  /**\n   * Callback fired when an option is selected.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see listboxOpen).\n   */\n  onListboxOpenChange: PropTypes.func,\n\n  /**\n   * Function that customizes the rendering of the selected value.\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * The selected value.\n   * Set to `null` to deselect all options.\n   */\n  value: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .any\n} : void 0;\n/**\n * The foundation for building custom-styled select components.\n *\n * Demos:\n *\n * - [Selects](https://mui.com/components/selects/)\n *\n * API:\n *\n * - [SelectUnstyled API](https://mui.com/api/select-unstyled/)\n */\n\nexport default SelectUnstyled;","map":null,"metadata":{},"sourceType":"module"}